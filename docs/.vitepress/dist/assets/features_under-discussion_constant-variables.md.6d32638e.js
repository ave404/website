import{_ as n,c as o,b as s,d as a,e as t,a as l,o as r,r as p}from"./app.e13f5bad.js";const D=JSON.parse('{"title":"Constant Variables","description":"","frontmatter":{},"headers":[{"level":2,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":2,"title":"Comparison to regular constants","slug":"comparison-to-regular-constants","link":"#comparison-to-regular-constants","children":[]}],"relativePath":"features/under-discussion/constant-variables.md","lastUpdated":1673374807000}'),i={name:"features/under-discussion/constant-variables.md"},c={id:"constant-variables",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#constant-variables","aria-hidden":"true"},"#",-1),u=l(`<p>All variables in PHP are mutable by default. You can assign a value to a variable as many times as you wish. Many modern languages also have support for constant variables, e.g. JavaScript with <code>const</code> and Rust with <code>let</code>.</p><p>This proposal includes new syntax for creating constant variables that cannot be re-assigned after initial their initial declaration.</p><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-hidden="true">#</a></h2><p>PHP already has support for <code>const</code> statements inside of class-like structures and procedural code. This proposal suggests an extension of this syntax that would allow the following.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-GjrIA" id="tab-Whpm0u5" checked="checked"><label for="tab-Whpm0u5">const-var.pxp</label><input type="radio" name="group-GjrIA" id="tab-XKd1vkw"><label for="tab-XKd1vkw">const-var.php</label></div><div class="blocks"><div class="language-pxp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">pxp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>An optional type can also be provided for the variable. This will be used by the static analyser to enforce type safe assignment.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1fSGw" id="tab-IS6yUmB" checked="checked"><label for="tab-IS6yUmB">const-var-type.pxp</label><input type="radio" name="group-1fSGw" id="tab-jxOOS4A"><label for="tab-jxOOS4A">const-var-type.php</label></div><div class="blocks"><div class="language-pxp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">pxp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="comparison-to-regular-constants" tabindex="-1">Comparison to regular constants <a class="header-anchor" href="#comparison-to-regular-constants" aria-hidden="true">#</a></h2><p>PHP does already have support for constants through <code>const</code> declarations and calls to <code>define()</code>.</p><p>These behave in a similar fashion to constant variables such that you cannot re-declare them or change the held value.</p><p>The major difference in behaviour is what type of values can be held in the first place.</p><p>PHP&#39;s constants are only capable of storing the following values:</p><ul><li><code>string</code></li><li><code>int</code></li><li><code>float</code></li><li><code>bool</code></li><li><code>array</code></li></ul><p>The <code>array</code> type has even further restrictions that mean you can only create an array using constant expressions. This prevents you from calling functions, referencing variables and more.</p><p>Constant variables in PXP can hold any type of value that a regular variable can hold.</p>`,15);function h(y,b,v,m,g,C){const e=p("Badge");return r(),o("div",null,[s("h1",c,[a("Constant Variables "),t(e,{type:"warning",text:"under discussion"}),a(),d]),u])}const A=n(i,[["render",h]]);export{D as __pageData,A as default};
