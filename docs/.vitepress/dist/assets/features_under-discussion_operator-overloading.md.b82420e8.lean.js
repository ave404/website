import{_ as l,c as o,b as n,d as s,e as p,a as e,o as t,r}from"./app.48e3b5d7.js";const g=JSON.parse('{"title":"Operator Overloading","description":"","frontmatter":{},"headers":[{"level":2,"title":"Operators and Methods","slug":"operators-and-methods","link":"#operators-and-methods","children":[{"level":3,"title":"Why not use an interface for each method?","slug":"why-not-use-an-interface-for-each-method","link":"#why-not-use-an-interface-for-each-method","children":[]}]},{"level":2,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]}],"relativePath":"features/under-discussion/operator-overloading.md","lastUpdated":1673372410000}'),c={name:"features/under-discussion/operator-overloading.md"},y={id:"operator-overloading",tabindex:"-1"},D=n("a",{class:"header-anchor",href:"#operator-overloading","aria-hidden":"true"},"#",-1),C=e("",21);function i(F,d,A,b,h,u){const a=r("Badge");return t(),o("div",null,[n("h1",y,[s("Operator Overloading "),p(a,{type:"warning",text:"under discussion"}),s(),D]),C])}const f=l(c,[["render",i]]);export{g as __pageData,f as default};
